# # Optimize Function

# def objective(trial):
    
#     #param Space
#     criterion = trial.suggest_categorical('criterion', ['mse', 'mae'])
#     max_features = trial.suggest_categorical("max_features", ['auto','sqrt'])
#     bootstrap = trial.suggest_categorical("bootstrap", [False])
#     max_depth = trial.suggest_int("max_depth", 2,90, log = True)
#     n_estimators = trial.suggest_int("n_estimators",100, 2000)
#     min_samples_split = trial.suggest_int("min_samples_split",2,10)
#     min_samples_leaf = trial.suggest_int("min_samples_leaf",1,5)
    
#     model = RandomForestRegressor(criterion = criterion,n_estimators = n_estimators,
#                                   max_depth = max_depth, max_features = max_features, min_samples_leaf = min_samples_leaf,
#                                   min_samples_split = min_samples_split, random_state=101, n_jobs=-1)
    
#     # Pruning
#     for step in range(100):
#         model.fit(features_GLLM, target)
        
#         # Report intermediate objective value.
#         intermediate_value = model_selection.cross_val_score(model, features_GLLM, target, cv=kf, scoring="neg_root_mean_squared_error", n_jobs=-1).mean()
#         trial.report(intermediate_value, step)

#         # Handle pruning based on the intermediate value.
#         if trial.should_prune():
#             raise optuna.TrialPruned()
#         return intermediate_value
    
#     # Scoring
      
#     scores = model_selection.cross_val_score(model, features_GLLM, target, cv=kf, scoring="neg_root_mean_squared_error", n_jobs=-1).mean()
#     return scores

# create study
# study = optuna.create_study(direction="maximize", sampler = TPESampler(), pruner = HyperbandPruner(
#         min_resource=1, max_resource=100, reduction_factor=3))
# study.optimize(objective, n_trials=50, show_progress_bar=True, n_jobs=-1)

# # Calculating the pruned and completed trials
# pruned_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.PRUNED]
# complete_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.COMPLETE]

# print("  Number of finished trials: ", len(study.trials))
# print("  Number of pruned trials: ", len(pruned_trials))
# print("  Number of complete trials: ", len(complete_trials))

# Creating Model Object
# rfModel = RandomForestRegressor(**study.best_params, random_state=101, n_jobs=-1)

# rfModel.fit(features_GLLM,target)

# rfModel_Predict = model_selection.cross_val_predict(rfModel,features_GLLM,target,cv=kf,n_jobs=-1)

# # Cross Validation Score(Accuracy)

# rf_all_score = model_selection.cross_val_score(rfModel,features_GLLM,target,cv=kf,n_jobs=-1,scoring='neg_root_mean_squared_error').mean()
# print("\n Root Mean Squared Error  : ", rf_all_score,"\n" )

# print("\n R-Squared : ",metrics.r2_score(target,rfModel_Predict))
# print("\n Mean Absolute Error : ",metrics.mean_absolute_error(target,rfModel_Predict))